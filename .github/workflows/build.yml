name: CI

on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]
    paths:
      [
        ".github/scripts/**",
        ".github/workflows/build.yml",
        "**/CMakeLists.txt",
        "**/Makefile",
        "**/*.h",
        "**/*.hpp",
        "**/*.c",
        "**/*.cpp",
        "**/*.cu",
        "**/*.cc",
        "**/*.cxx",
        "llama.cpp",
        "!docs/**",
        "!.gitignore",
        "!README.md",
      ]
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      [
        ".github/scripts/**",
        ".github/workflows/build.yml",
        "**/CMakeLists.txt",
        "**/Makefile",
        "**/*.h",
        "**/*.hpp",
        "**/*.c",
        "**/*.cpp",
        "**/*.cu",
        "**/*.cc",
        "**/*.cxx",
        "llama.cpp",
        "!docs/**",
        "!.gitignore",
        "!README.md",
      ]
  workflow_dispatch:

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  LLM_MODEL_URL: https://delta.jan.ai/tinyllama-1.1b-chat-v0.3.Q2_K.gguf
  WHISPER_MODEL_URL: https://delta.jan.ai/ggml-tiny-q5_1.bin

jobs:
  create-draft-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    permissions:
      contents: write
    steps:
      - name: Extract tag name without v prefix
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV && echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
        env:
          GITHUB_REF: ${{ github.ref }}
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ env.VERSION }}"
          draft: true
          prerelease: false

  # Get the latest version of the release
  set-nitro-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_update.outputs.new_version }}
    steps:
      - name: Get latest release
        id: version_update
        run: |
          ldd --version
          if [[ ${{ github.event_name }} == push && ${{ github.ref }} == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}"
            NEW_VERSION="${VERSION#v}"
            echo "::set-output name=new_version::$NEW_VERSION"
          else
            # Function to get the latest release tag
            get_latest_tag() {
              local retries=0
              local max_retries=3
              local tag
              while [ $retries -lt $max_retries ]; do
                tag=$(curl -s https://api.github.com/repos/janhq/nitro/releases/latest | jq -r .tag_name)
                if [ -n "$tag" ] && [ "$tag" != "null" ]; then
                  echo $tag
                  return
                else
                  let retries++
                  sleep 2
                fi
              done
              echo "Failed to fetch latest tag after $max_retries attempts."
              exit 1
            }
            # Get the latest release tag from GitHub API
            LATEST_TAG=$(get_latest_tag)
            
            # Remove the 'v' and append the build number to the version
            NEW_VERSION="${LATEST_TAG#v}-${GITHUB_RUN_NUMBER}"
            echo "New version: $NEW_VERSION"
            echo "::set-output name=new_version::$NEW_VERSION"
          fi
          echo "Version: $NEW_VERSION"

  macOS-silicon-build:
    runs-on: mac-silicon
    needs: [create-draft-release, set-nitro-version]
    if: always() && (needs.create-draft-release.result == 'success' || needs.create-draft-release.result == 'skipped') && needs.set-nitro-version.result == 'success'
    timeout-minutes: 20
    permissions:
      contents: write
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Dependencies
        id: depends
        continue-on-error: true
        run: |
          brew update
          brew install cmake sdl2

      - name: Build
        id: cmake_build
        run: |
          ./install_deps.sh
          mkdir build && cd build
          cmake -DLLAMA_METAL_EMBED_LIBRARY=ON -DWHISPER_COREML=1 -DNITRO_VERSION=${{ needs.set-nitro-version.outputs.version }} .. 
          CC=gcc-8 make -j $(sysctl -n hw.ncpu)
          ls -la

      - name: Package
        shell: bash
        run: |
          mkdir -p nitro
          cp llama.cpp/ggml-metal.metal nitro/
          cp build/nitro nitro/

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: nitro-mac-arm64
          path: ./nitro
